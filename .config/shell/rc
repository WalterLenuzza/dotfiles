# Shared shell settings (bash/zsh)

# Environment variables: source XDG user directories
# https://wiki.archlinux.org/index.php/XDG_user_directories

# shellcheck source=/dev/null
. "$XDG_CONFIG_HOME/user-dirs.dirs"

# Environment variables
# set PATH so it includes user's private bin directories
PATH="$PATH":"$XDG_BIN_DIR"

# Prefer US English and use UTF-8
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# Xorg
#export XAUTHORITY="$XDG_RUNTIME_DIR"/Xauthority
#export GTK_RC_FILES="$XDG_CONFIG_HOME"/gtk-1.0/gtkrc
#export GTK2_RC_FILES="$XDG_CONFIG_HOME"/gtk-2.0/gtkrc
#export RXVT_SOCKET="$XDG_RUNTIME_DIR"/urxvtd

# ftp_proxy="ftp://192.168.1.1:21"
# http_proxy="http://192.168.1.1:80"

# Default programs
if [ "$(command -v most)" ]; then
  PAGER='most'
  alias less='most'
else
  PAGER='less'
  LESS='-FMnqrX'
fi

EDITOR='vi'
VISUAL='vi'
BROWSER='firefox'

# Colorize ls
export CLICOLOR=1
export CLICOLOR_FORCE=1  # Always show colors (with less and grep), Experimental

# Enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  eval "$(dircolors -b)"
fi

alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Aliases: list files
if [ "$(command -v exa)" ]; then
  alias  v='exa -a --git --long --header --time-style=long-iso'                    # Long listing
  alias vs='exa -a --git --long --header --time-style=long-iso --sort=size'        # Sort by size
  alias vt='exa -a --git --long --header --time-style=long-iso --sort=oldest'      # Sort by mtime-reversed
  alias vx='exa -a --git --long --header --time-style=long-iso --group --extended' # Show ACLs and xattrs
  alias tree='exa -a --ignore-glob=".git" --tree'
else
  alias la='ls -A --color=auto'
  alias  v='ls -lhA'            # Long listing
  alias vs='ls -lhASr'          # Sort by size-reversed
  alias vt='ls -lhAtr'          # Sort by mtime-reversed
  alias vx='ls -lhAe@'          # Show ACLs and xattrs
  alias tree='tree -aC -I .git --dirsfirst'
fi

# Aliases: disk usage
if [ "$(command -v ncdu)" ]; then
  alias d='ncdu'
else
  alias d='du -csh | sort -nk'
fi
# du -sch .[!.]* * |sort -h
# ncdu

# Aliases: misc
alias df='df -h'
alias ln='ln -v'
alias mkdir='mkdir -p'
alias mv='mv -vi'
alias p='ps fax'
alias rm='rm -v'

alias mc='mc -a'
alias tmux='tmux -2'

alias clean_DS_Store='find . -name *.DS_Store -type f -print -delete'
alias dotfiles='git --git-dir="$XDG_DATA_HOME"/dotfiles --work-tree="$HOME"'

alias yay-install='yay -Sy --needed --noconfirm - < "$XDG_CONFIG_HOME"/yay/packagelist'
alias yay-upgrade='yay -Syu --devel --timeupdate'

alias vimrc='nvim ~/.config/nvim'

# Replace 'ps fax' on MacOSX
if [ "$(uname)" = 'Darwin' ]; then
  alias ps='pstree -U | grep -vE (/System/Library/|/usr/)'
fi

# Aliases: Visual Editor
[ "$(command -v vim)" ] && { \
  alias vi='vim'
  alias vim='vim'
  EDITOR='vim'
  VISUAL='vim'
}
[ "$(command -v nvim)" ] && { \
  alias vi='nvim'
  alias vim='nvim'
  EDITOR='nvim'
  VISUAL='nvim'
}

### Functions ###
# Change directory and list its contents straight away
c() {
  local new_directory="$*"
  if [ $# -eq 0 ]; then
    new_directory=${HOME}
  fi
  builtin cd "${new_directory}" && ls -lhAG --color=auto
}

# Print TrueColor test
color_true_test() {
  awk 'BEGIN{
    s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
    for (colnum = 0; colnum<77; colnum++) {
        r = 255-(colnum*255/76);
        g = (colnum*510/76);
        b = (colnum*255/76);
        if (g>255) g = 510-g;
        printf "\033[48;2;%d;%d;%dm", r,g,b;
        printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
        printf "%s\033[0m", substr(s,colnum+1,1);
    }
    printf "\n";
  }'
}

# Print a color test table
# credit: https://github.com/mikker/dotfiles/blob/master/bin/colortest.sh
color_table_test() {
  local T='gYw'   # The test text

  echo -e "\\n                 40m     41m     42m     43m\
    44m     45m     46m     47m";

  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
    '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
    '  36m' '1;36m' '  37m' '1;37m';
    do FG=${FGs// /}
    echo -en " $FGs \\033[$FG  $T  "
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
      do echo -en "$EINS \\033[$FG\\033[$BG  $T  \\033[0m";
    done
    echo;
  done
  echo
}

# Check if commands exist
commands_exist() {
  for cmd in "$@"; do
    command -v "$cmd" >/dev/null 2>&1 || return 1
  done
}

# Speed up script by not using unicode
disable_unicode() {
  export LC_ALL=C
  export LANG=C
}

# Docker clean all unused containers/images
docker_cleanup() {
  docker rm -v "$(docker ps --filter status=exited -q 2>/dev/null)" 2>/dev/null
  docker rmi "$(docker images --filter dangling=true -q 2>/dev/null)" 2>/dev/null
}
docker_cleanup_all() {
  docker rm -v "$(docker ps -a 2>/dev/null)" 2>/dev/null
  docker rmi "$(docker images -a -q 2>/dev/null)" 2>/dev/null
}

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is Mac OS X-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
extract () {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2) tar -jxvf "$1"                    ;;
      *.tar.gz)  tar -zxvf "$1"                    ;;
      *.bz2)     bunzip2 "$1"                      ;;
      *.dmg)     hdiutil mount "$1"                ;;
      *.gz)      gunzip "$1"                       ;;
      *.tar)     tar -xvf "$1"                     ;;
      *.tbz2)    tar -jxvf "$1"                    ;;
      *.tgz)     tar -zxvf "$1"                    ;;
      *.zip)     unzip "$1"                        ;;
      *.ZIP)     unzip "$1"                        ;;
      *.pax)     pax -r < "$1"                     ;;
      *.pax.Z)   uncompress "$1" --stdout | pax -r ;;
      *.rar)     unrar x "$1"                      ;;
      *.Z)       uncompress "$1"                   ;;
      *)         echo "'$1' cannot be extracted/mounted via extract()" ;;
     esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Log the message to standard error, as well as the system log
# Ref. `man logger` and `man syslog`
# $1: message to log
# $2: priority (optional, defaults to user.notice)
# $3: tag (optional)
log() {
  local message="$1"
  local priority="$([ -z "$2" ] || echo -n "-p user.$2")"
  local tag="$([ -z "$3" ] || echo -n "-t $3")"
  logger -s "$priority $tag $message"
}

# Colorize 'man'
man() {
  env LESS_TERMCAP_mb=$'\E[01;31m' \
  LESS_TERMCAP_md=$'\E[01;38;5;74m' \
  LESS_TERMCAP_me=$'\E[0m' \
  LESS_TERMCAP_se=$'\E[0m' \
  LESS_TERMCAP_so=$'\E[38;5;246m' \
  LESS_TERMCAP_ue=$'\E[0m' \
  LESS_TERMCAP_us=$'\E[04;38;5;146m' \
  man "$@"
}

# Message of the Day
motd() {
  # Print pretty system logo/info (neofetch)
  if [ "$(command -v neofetch)" ]; then
    neofetch
  fi

  # Fortune
  if [ "$(command -v fortune)" ]; then
    fortune computers science
  fi

  # Show today's anniversaries
  if [ "$(command -v calendar)" ]; then
    calendar -A 0 -f /usr/share/calendar/calendar.world
  fi
}

# Colorized $PATH
path() {
  local blue="\\033[1;34m"
  local green="\\033[0;32m"
  local cyan="\\033[0;36m"
  local purple="\\033[0;35m"
  local brown="\\033[0;33m"
  local reset_color="\\033[0m"
  echo "$PATH" | tr ":" "\\n" | \
    awk "{ sub(\"/usr\",   \"$green/usr$reset_color\"); \
           sub(\"/bin\",   \"$blue/bin$reset_color\"); \
           sub(\"/opt\",   \"$cyan/opt$reset_color\"); \
           sub(\"/sbin\",  \"$purple/sbin$reset_color\"); \
           sub(\"/local\", \"$brown/local$reset_color\"); \
           print }"
}

# Random password generator
# Alternative:  openssl rand -base64 12
randpassgen() {
  local number=$1
  local lenght=$2
  : ${number:='1'}
  : ${lenght:='16'}
  local prefix='https://www.random.org/strings'
  local suffix='digits=on&upperalpha=on&loweralpha=on&unique=off&format=plain&rnd=new'
  local url="$prefix/?num=$number&len=$lenght&$suffix"
  [ "$(command -v curl)" ] && curl --silent "$url"
}

# Set title of terminal window/tab
# $*: string
title() {
  local title=$*
  echo -ne "\\033]0;$title\\007"
}

# Weather (defaults to London, EU)
# $1: city
weather() {
  local city=$1
  : "${city:='London'}"
  [ "$(command -v curl)" ] && curl --silent http://wttr.in/$city
}

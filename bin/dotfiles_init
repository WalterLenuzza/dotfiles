#!/usr/bin/env bash

# Safety
set -eo pipefail

# Speed up script by not using unicode
export LC_ALL=C
export LANG=C

# Parameters
if [ -z "$XDG_DATA_HOME" ]; then
  XDG_DATA_HOME="$HOME/.local/share"
fi
DOTFILES_REPO_DIR="$XDG_DATA_HOME/dotfiles"
DOTFILES_GIT_URL='https://github.com/waltlenu/dotfiles'
DOTFILES_GIT_BRANCH='refactor'

# Check if current shell is greater than BASH v4
[ $BASH_VERSINFO -ge 4 ] || { \
  echo >&2 'SHELL is not >= BASHv4. Aborting!'
  exit 1
}

# Check if git command exists
command -v git >/dev/null 2>&1 || { \
  echo >&2 'git not installed. Aborting!'
  exit 1
}

# Create Git repository directory
if ! [ -d "$DOTFILES_REPO_DIR" ]; then
  mkdir -p "$DOTFILES_REPO_DIR" || { \
    echo >&2 'create directory failed. Aborting!'
    exit 1
  }
fi

# Clone bare DOTFILES_GIT_URL@DOTFILES_GIT_BRANCH repository
pushd "$DOTFILES_REPO_DIR"  >/dev/null 2>&1
if ! $(/usr/bin/env git rev-parse --git-dir > /dev/null 2>&1); then
  /usr/bin/env git clone --bare --recursive -b "$DOTFILES_GIT_BRANCH" "$DOTFILES_GIT_URL" "$DOTFILES_REPO_DIR" || { \
    echo >&2 'git clone failed. Aborting!'
    exit 1
  }
fi
popd >/dev/null 2>&1

# Configure repository: omit untracked files and set origin
/usr/bin/env git --git-dir="$DOTFILES_REPO_DIR" --work-tree="$HOME" config --local status.showUntrackedFiles no
/usr/bin/env git --git-dir="$DOTFILES_REPO_DIR" --work-tree="$HOME" config --local remote.origin.fetch 'refs/heads/*:refs/heads/*'

# Print all managed dotfiles
for FILE in $(/usr/bin/env git --git-dir="$DOTFILES_REPO_DIR" --work-tree="$HOME" ls-tree --full-tree -r --name-only HEAD); do
  if [ -f "$HOME/$FILE" ]; then
    echo "File exists: $HOME/$FILE"
  fi
done

# Checkout branch
/usr/bin/env git --git-dir="$DOTFILES_REPO_DIR" --work-tree="$HOME" checkout

# Alias dotfiles to git
echo 'Set this alias'
alias dotfiles="/usr/bin/env git --git-dir="$DOTFILES_REPO_DIR" --work-tree="$HOME""

# Print alias
alias dotfiles


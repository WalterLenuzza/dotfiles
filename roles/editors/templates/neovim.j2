"
" NeoVim config
"

" Enforce not vi-compatible mode even though
" when Vim finds a vimrc, 'nocompatible' is set anyway
set nocompatible

" Manage plugins Pathogen (https://github.com/tpope/vim-pathogen)
execute pathogen#infect('bundle/{}', '{{ xdg_data_home }}/nvim/bundle/{}')

" Load filtype plugins according to detected filetype
if has('autocmd')
  filetype plugin indent on
endif


"
" Editing
"

" Indent according to previous line
set autoindent

" Use spaces instead of tabs
set expandtab

" Tab key indents by 4 spaces
set softtabstop=4

" >> indents by 2 spaces.
set shiftwidth=2

" >> indents to next multiple of 'shiftwidth'
set shiftround

" Make backspace work as you would expect
set backspace=indent,eol,start

" Switch between buffers without having to save first
set hidden


"
" Visual
"

" Faster redrawing
set ttyfast

" Only redraw when necessary
set lazyredraw

" Enable syntax highlighting
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" Show line numbers
set nu

" Always show statusline
set laststatus=2

" Show as much as possible of the last line
set display=lastline

" Show current mode in command-line
set showmode

" Show already typed keys when more are expected
set showcmd

" Disable code folding
set nofoldenable


"
" Colors
"

" Enable TrueColor
set termguicolors

" Make the background dark
set background=dark

" Colorscheme
colorscheme gruvbox   " TEMP: Gruvbox


"
" Plugins: Airline
"

" Set Airline's theme
let g:vi_theme = '{{ vi_theme }}'

" Automatically display all buffers when there's only one tab open
let g:airline#extensions#tabline#enabled = 1

" Enable whitespace display
let g:airline#extensions#whitespace#enabled = 1

" Enable Powerline symbols
let g:airline_powerline_fonts = 1

"
" Plugins: Promptline
"

" Match Airline's theme
"let g:promptline_theme = '{{ vi_theme }}'

" sections (a, b, c, x, y, z, warn) are optional
"let g:promptline_preset = {
"  \'x' : [ promptline#slices#cwd() ],
"  \'y' : [ promptline#slices#vcs_branch(), promptline#slices#git_status() ],
"  \'z' : [ promptline#slices#jobs() ],
"  \'warn' : [ promptline#slices#last_exit_code() ]}






""""""""""""""
" Temp

"set incsearch              " Highlight while searching with / or ?.
"set hlsearch               " Keep matches highlighted.
"set splitbelow             " Open new windows below the current window.
"set splitright             " Open new windows right of the current window.

"set cursorline             " Find the current line quickly.
"set wrapscan               " Searches wrap around end-of-file.
"set report      =0         " Always report changed lines.
"set synmaxcol   =200       " Only highlight the first 200 columns.


" NerdTree
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"let NERDTreeMinimalUI=1


"set showcmd             " Show (partial) command in status line.
"set showmatch           " Show matching brackets.
"set showmode            " Show current mode.
"set ruler               " Show the line and column numbers of the cursor.
"set number              " Show the line numbers on the left side.
"set formatoptions+=o    " Continue comment marker in new lines.
"set textwidth=0         " Hard-wrap long lines as you type them.
"set expandtab           " Insert spaces when TAB is pressed.
"set tabstop=2           " Render TABs using this many spaces.
"set shiftwidth=2        " Indentation amount for < and > commands.
"
" set noerrorbells        " No beeps.
" set modeline            " Enable modeline.
" set esckeys             " Cursor keys in insert mode.
" set linespace=0         " Set line-spacing to minimum.
" set nojoinspaces        " Prevents inserting two spaces after punctuation on a join (J)
"
" " More natural splits
" set splitbelow          " Horizontal split below current.
" set splitright          " Vertical split to right of current.
"
" if !&scrolloff
"   set scrolloff=3       " Show next 3 lines while scrolling.
" endif
" if !&sidescrolloff
"   set sidescrolloff=5   " Show next 5 columns while side-scrolling.
" endif
" set nostartofline       " Do not jump to first character with page commands.

"
" Vimrc
"

" Indent according to previous line.
"set autoindent
"set expandtab              " Use spaces instead of tabs.
"set softtabstop =4         " Tab key indents by 4 spaces.
"set shiftwidth  =2         " >> indents by 2 spaces.
"set shiftround             " >> indents to next multiple of 'shiftwidth'.
"
"set backspace   =indent,eol,start  " Make backspace work as you would expect.
"set hidden                 " Switch between buffers without having to save first.
"set laststatus  =2         " Always show statusline.
"set display     =lastline  " Show as much as possible of the last line.
"
"set showmode               " Show current mode in command-line.
"set showcmd                " Show already typed keys when more are expected.
"
"set incsearch              " Highlight while searching with / or ?.
"set hlsearch               " Keep matches highlighted.
"
"set ttyfast                " Faster redrawing.
"set lazyredraw             " Only redraw when necessary.
"
"set splitbelow             " Open new windows below the current window.
"set splitright             " Open new windows right of the current window.
"
"set cursorline             " Find the current line quickly.
"set wrapscan               " Searches wrap around end-of-file.
"set report      =0         " Always report changed lines.
"set synmaxcol   =200       " Only highlight the first 200 columns.
"
"
"
"" Cursorline: highlight current line
"set cursorline
"hi CursorLine   cterm=NONE ctermbg=darkgrey ctermfg=white guibg=darkgrey guifg=white
"hi CursorColumn cterm=NONE ctermbg=darkgrey ctermfg=white guibg=darkgrey guifg=white
"nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>
"
"" TAB
"nnoremap <Tab> <Esc>
"vnoremap <Tab> <Esc>gV
"onoremap <Tab> <Esc>
"inoremap <Tab> <Esc>`^
"inoremap <Leader><Tab> <Tab>
"
"" Commenter
"filetype on
"augroup vimrc_filetype
" autocmd!
" autocmd FileType c call s:MyCSettings()
" autocmd FileType vim call s:MyVimSettings()
"augroup end
"
"" Clear all comment markers (one rule for all languages)
"map _ :s/^\/\/\\|^--\\|^> \\|^[#"%!;]//<CR>:nohlsearch<CR>
"
"function! s:MyCSettings()
"  " Insert comments markers
"  map - :s/^/\/\//<CR>:nohlsearch<CR>
"endfunction
"
"function! s:MyVimSettings()
"  " Insert comments markers
"  map - :s/^/\"/<CR>:nohlsearch<CR>
"endfunction

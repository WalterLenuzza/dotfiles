#!/usr/bin/env bash


# Change directory and list its contents straight away
function c() {
    local new_directory="$*"
    if [ $# -eq 0 ]; then 
        new_directory=${HOME}
    fi
    builtin cd "${new_directory}" && ls -lhAG
}


# Docker clean all unused containers/images
docker_cleanup() {
  docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
  docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is Mac OS X-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
extract () {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2)  tar -jxvf $1                     ;;
      *.tar.gz)   tar -zxvf $1                     ;;
      *.bz2)      bunzip2 $1                       ;;
      *.dmg)      hdiutil mount $1                 ;;
      *.gz)       gunzip $1                        ;;
      *.tar)      tar -xvf $1                      ;;
      *.tbz2)     tar -jxvf $1                     ;;
      *.tgz)      tar -zxvf $1                     ;;
      *.zip)      unzip $1                         ;;
      *.ZIP)      unzip $1                         ;;
      *.pax)      cat $1 | pax -r                  ;;
      *.pax.Z)    uncompress $1 --stdout | pax -r  ;;
      *.rar)      unrar x $1                       ;;
      *.Z)        uncompress $1                    ;;
      *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
     esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Log the message to standard error, as well as the system log
# Ref. `man logger` and `man syslog` 
# $1: message to log
# $2: priority (optional, defaults to user.notice)
# $3: tag (optional)
function log() {
  local message="$1"
  local priority="$([ -z $2 ] || echo -n "-p user.$2")"
  local tag="$([ -z $3 ] || echo -n "-t $3")"
  logger -s $priority $tag $message
}

# Colorize 'man'
man() {
    env LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[38;5;246m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
    man "$@"
}

# Colorized $PATH
path() {
  local blue="\033[1;34m"
  local green="\033[0;32m"
  local cyan="\033[0;36m"
  local purple="\033[0;35m"
  local brown="\033[0;33m"
  local reset_color="\033[0m"
  echo $PATH | tr ":" "\n" | \
    awk "{ sub(\"/usr\",   \"$green/usr$reset_color\"); \
           sub(\"/bin\",   \"$blue/bin$reset_color\"); \
           sub(\"/opt\",   \"$cyan/opt$reset_color\"); \
           sub(\"/sbin\",  \"$purple/sbin$reset_color\"); \
           sub(\"/local\", \"$brown/local$reset_color\"); \
           print }"
}

# Replace 'ps fax' on MacOSX
function ps() {
  if [ $(uname) == 'Darwin' ]; then
    pstree -U | grep -vE '(/System/Library/|/usr/)';
  else
    command ps $@;
  fi
}

# Random password generator
# Alternative:  openssl rand -base64 12
function randpassgen() {
  local number=$1
  local lenght=$2
  : ${number:='1'}
  : ${lenght:='16'}
  local prefix='https://www.random.org/strings'
  local suffix='digits=on&upperalpha=on&loweralpha=on&unique=off&format=plain&rnd=new'
  local url="$prefix/?num=$number&len=$lenght&$suffix"
  [ $(command -v curl) ] && curl --silent $url
}

# Set title of terminal window/tab
# $*: string
function title() {
  local title=$*
  echo -ne "\033]0;$title\007"
}

# Weather (defaults to London, EU)
# $1: city
function weather() {
  local city=$1
  : ${city:='London'}
  [ $(command -v curl) ] && curl --silent http://wttr.in/$city
}
